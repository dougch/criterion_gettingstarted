<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="2028"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,917 samples, 94.53%)</title><rect x="0.0000%" y="341" width="94.5266%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1917"/><text x="0.2500%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,917 samples, 94.53%)</title><rect x="0.0000%" y="325" width="94.5266%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1917"/><text x="0.2500%" y="335.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,917 samples, 94.53%)</title><rect x="0.0000%" y="309" width="94.5266%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1917"/><text x="0.2500%" y="319.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,916 samples, 94.48%)</title><rect x="0.0493%" y="293" width="94.4773%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1916"/><text x="0.2993%" y="303.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,913 samples, 94.33%)</title><rect x="0.1972%" y="277" width="94.3294%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1913"/><text x="0.4472%" y="287.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,898 samples, 93.59%)</title><rect x="0.9369%" y="261" width="93.5897%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="1898"/><text x="1.1869%" y="271.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,856 samples, 91.52%)</title><rect x="3.0079%" y="245" width="91.5187%" height="15" fill="rgb(207,160,47)" fg:x="61" fg:w="1856"/><text x="3.2579%" y="255.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,762 samples, 86.88%)</title><rect x="7.6430%" y="229" width="86.8836%" height="15" fill="rgb(228,23,34)" fg:x="155" fg:w="1762"/><text x="7.8930%" y="239.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,629 samples, 80.33%)</title><rect x="14.2012%" y="213" width="80.3254%" height="15" fill="rgb(218,30,26)" fg:x="288" fg:w="1629"/><text x="14.4512%" y="223.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,432 samples, 70.61%)</title><rect x="23.9152%" y="197" width="70.6114%" height="15" fill="rgb(220,122,19)" fg:x="485" fg:w="1432"/><text x="24.1652%" y="207.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (1,170 samples, 57.69%)</title><rect x="36.8343%" y="181" width="57.6923%" height="15" fill="rgb(250,228,42)" fg:x="747" fg:w="1170"/><text x="37.0843%" y="191.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (907 samples, 44.72%)</title><rect x="49.8028%" y="165" width="44.7239%" height="15" fill="rgb(240,193,28)" fg:x="1010" fg:w="907"/><text x="50.0528%" y="175.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (628 samples, 30.97%)</title><rect x="63.5602%" y="149" width="30.9665%" height="15" fill="rgb(216,20,37)" fg:x="1289" fg:w="628"/><text x="63.8102%" y="159.50">criterion_gettingstarted::fibonacci_slow</text></g><g><title>criterion_gettingstarted::fibonacci_slow (403 samples, 19.87%)</title><rect x="74.6548%" y="133" width="19.8718%" height="15" fill="rgb(206,188,39)" fg:x="1514" fg:w="403"/><text x="74.9048%" y="143.50">criterion_gettingstarted::fibon..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (224 samples, 11.05%)</title><rect x="83.4813%" y="117" width="11.0454%" height="15" fill="rgb(217,207,13)" fg:x="1693" fg:w="224"/><text x="83.7313%" y="127.50">criterion_gettin..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (133 samples, 6.56%)</title><rect x="87.9684%" y="101" width="6.5582%" height="15" fill="rgb(231,73,38)" fg:x="1784" fg:w="133"/><text x="88.2184%" y="111.50">criterion..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (48 samples, 2.37%)</title><rect x="92.1598%" y="85" width="2.3669%" height="15" fill="rgb(225,20,46)" fg:x="1869" fg:w="48"/><text x="92.4098%" y="95.50">cr..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (21 samples, 1.04%)</title><rect x="93.4911%" y="69" width="1.0355%" height="15" fill="rgb(210,31,41)" fg:x="1896" fg:w="21"/><text x="93.7411%" y="79.50"></text></g><g><title>criterion_gettingstarted::fibonacci_slow (8 samples, 0.39%)</title><rect x="94.1321%" y="53" width="0.3945%" height="15" fill="rgb(221,200,47)" fg:x="1909" fg:w="8"/><text x="94.3821%" y="63.50"></text></g><g><title>criterion_gettingstarted::fibonacci_slow (3 samples, 0.15%)</title><rect x="94.3787%" y="37" width="0.1479%" height="15" fill="rgb(226,26,5)" fg:x="1914" fg:w="3"/><text x="94.6287%" y="47.50"></text></g><g><title>all (2,028 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="527.50"></text></g><g><title>flamegraph-5749 (2,028 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="511.50">flamegraph-5749</text></g><g><title>_start (2,028 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="495.50">_start</text></g><g><title>__libc_start_main (2,028 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="479.50">__libc_start_main</text></g><g><title>main (2,028 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,028 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try/std::panicking::try::do_call/core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt;..</text></g><g><title>std::rt::lang_start::{{closure}} (2,028 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,028 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>flamegraph::main (2,028 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="399.50">flamegraph::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (2,028 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="383.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (2,028 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="2028"/><text x="0.2500%" y="367.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (111 samples, 5.47%)</title><rect x="94.5266%" y="341" width="5.4734%" height="15" fill="rgb(229,88,8)" fg:x="1917" fg:w="111"/><text x="94.7766%" y="351.50">&lt;criter..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (111 samples, 5.47%)</title><rect x="94.5266%" y="325" width="5.4734%" height="15" fill="rgb(213,181,19)" fg:x="1917" fg:w="111"/><text x="94.7766%" y="335.50">criteri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (111 samples, 5.47%)</title><rect x="94.5266%" y="309" width="5.4734%" height="15" fill="rgb(254,191,54)" fg:x="1917" fg:w="111"/><text x="94.7766%" y="319.50">criteri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (111 samples, 5.47%)</title><rect x="94.5266%" y="293" width="5.4734%" height="15" fill="rgb(241,83,37)" fg:x="1917" fg:w="111"/><text x="94.7766%" y="303.50">criteri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (110 samples, 5.42%)</title><rect x="94.5759%" y="277" width="5.4241%" height="15" fill="rgb(233,36,39)" fg:x="1918" fg:w="110"/><text x="94.8259%" y="287.50">criteri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (110 samples, 5.42%)</title><rect x="94.5759%" y="261" width="5.4241%" height="15" fill="rgb(226,3,54)" fg:x="1918" fg:w="110"/><text x="94.8259%" y="271.50">criteri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (110 samples, 5.42%)</title><rect x="94.5759%" y="245" width="5.4241%" height="15" fill="rgb(245,192,40)" fg:x="1918" fg:w="110"/><text x="94.8259%" y="255.50">criteri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (105 samples, 5.18%)</title><rect x="94.8225%" y="229" width="5.1775%" height="15" fill="rgb(238,167,29)" fg:x="1923" fg:w="105"/><text x="95.0725%" y="239.50">criter..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (98 samples, 4.83%)</title><rect x="95.1677%" y="213" width="4.8323%" height="15" fill="rgb(232,182,51)" fg:x="1930" fg:w="98"/><text x="95.4177%" y="223.50">criter..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (81 samples, 3.99%)</title><rect x="96.0059%" y="197" width="3.9941%" height="15" fill="rgb(231,60,39)" fg:x="1947" fg:w="81"/><text x="96.2559%" y="207.50">crit..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (65 samples, 3.21%)</title><rect x="96.7949%" y="181" width="3.2051%" height="15" fill="rgb(208,69,12)" fg:x="1963" fg:w="65"/><text x="97.0449%" y="191.50">cri..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (47 samples, 2.32%)</title><rect x="97.6824%" y="165" width="2.3176%" height="15" fill="rgb(235,93,37)" fg:x="1981" fg:w="47"/><text x="97.9324%" y="175.50">c..</text></g><g><title>criterion_gettingstarted::fibonacci_slow (33 samples, 1.63%)</title><rect x="98.3728%" y="149" width="1.6272%" height="15" fill="rgb(213,116,39)" fg:x="1995" fg:w="33"/><text x="98.6228%" y="159.50"></text></g><g><title>criterion_gettingstarted::fibonacci_slow (20 samples, 0.99%)</title><rect x="99.0138%" y="133" width="0.9862%" height="15" fill="rgb(222,207,29)" fg:x="2008" fg:w="20"/><text x="99.2638%" y="143.50"></text></g><g><title>criterion_gettingstarted::fibonacci_slow (12 samples, 0.59%)</title><rect x="99.4083%" y="117" width="0.5917%" height="15" fill="rgb(206,96,30)" fg:x="2016" fg:w="12"/><text x="99.6583%" y="127.50"></text></g><g><title>criterion_gettingstarted::fibonacci_slow (7 samples, 0.35%)</title><rect x="99.6548%" y="101" width="0.3452%" height="15" fill="rgb(218,138,4)" fg:x="2021" fg:w="7"/><text x="99.9048%" y="111.50"></text></g><g><title>criterion_gettingstarted::fibonacci_slow (3 samples, 0.15%)</title><rect x="99.8521%" y="85" width="0.1479%" height="15" fill="rgb(250,191,14)" fg:x="2025" fg:w="3"/><text x="100.1021%" y="95.50"></text></g></svg></svg>